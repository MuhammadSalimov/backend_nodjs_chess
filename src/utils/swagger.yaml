openapi: 3.0.0
info:
  title: Chess Tournament API
  description: API for managing a chess tournament, including player, tournament, match, and leaderboard management.
  version: 1.0.0
servers:
  - url: http://localhost:4100
    description: Local server

paths:
  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        description: User registration details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: johndoe
                email:
                  type: string
                  example: johndoe@example.com
                password:
                  type: string
                  example: securepassword
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      summary: Log in an existing user
      requestBody:
        description: User login credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: johndoe@example.com
                password:
                  type: string
                  example: securepassword
      responses:
        '200':
          description: Successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: jwt_token_here
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'

  /players:
    get:
      summary: Retrieve all players
      responses:
        '200':
          description: A list of players
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    name:
                      type: string
                      example: Magnus Carlsen
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new player
      requestBody:
        description: Player details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Magnus Carlsen
      responses:
        '201':
          description: Player created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /players/{id}:
    get:
      summary: Retrieve a player by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Player details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: Magnus Carlsen
        '404':
          description: Player not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a player by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        description: Updated player details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Magnus Carlsen
      responses:
        '200':
          description: Player updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Player not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a player by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: Player deleted
        '404':
          description: Player not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tournaments:
    get:
      summary: Retrieve all tournaments
      responses:
        '200':
          description: A list of tournaments
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    name:
                      type: string
                      example: World Chess Championship
                    date:
                      type: string
                      format: date
                      example: 2024-12-01
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new tournament
      requestBody:
        description: Tournament details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: World Chess Championship
                date:
                  type: string
                  format: date
                  example: 2024-12-01
      responses:
        '201':
          description: Tournament created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tournaments/{id}:
    get:
      summary: Retrieve a tournament by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Tournament details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: World Chess Championship
                  date:
                    type: string
                    format: date
                    example: 2024-12-01
        '404':
          description: Tournament not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a tournament by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        description: Updated tournament details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: World Chess Championship
                date:
                  type: string
                  format: date
                  example: 2024-12-01
      responses:
        '200':
          description: Tournament updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Tournament not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a tournament by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: Tournament deleted
        '404':
          description: Tournament not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /matches:
    get:
      summary: Retrieve all matches
      responses:
        '200':
          description: A list of matches
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    player1_id:
                      type: integer
                      example: 1
                    player2_id:
                      type: integer
                      example: 2
                    tournament_id:
                      type: integer
                      example: 1
                    result:
                      type: string
                      example: player1_wins
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new match
      requestBody:
        description: Match details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                player1_id:
                  type: integer
                  example: 1
                player2_id:
                  type: integer
                  example: 2
                tournament_id:
                  type: integer
                  example: 1
                result:
                  type: string
                  example: player1_wins
      responses:
        '201':
          description: Match created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /matches/{id}:
    get:
      summary: Retrieve a match by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Match details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  player1_id:
                    type: integer
                    example: 1
                  player2_id:
                    type: integer
                    example: 2
                  tournament_id:
                    type: integer
                    example: 1
                  result:
                    type: string
                    example: player1_wins
        '404':
          description: Match not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a match by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        description: Updated match details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                player1_id:
                  type: integer
                  example: 1
                player2_id:
                  type: integer
                  example: 2
                tournament_id:
                  type: integer
                  example: 1
                result:
                  type: string
                  example: player1_wins
      responses:
        '200':
          description: Match updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Match not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a match by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: Match deleted
        '404':
          description: Match not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /leaderboard:
    get:
      summary: Retrieve the leaderboard
      responses:
        '200':
          description: Leaderboard details
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    player_id:
                      type: integer
                      example: 1
                    player_name:
                      type: string
                      example: Magnus Carlsen
                    points:
                      type: integer
                      example: 30
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
          example: Something went wrong
    AuthError:
      type: object
      properties:
        message:
          type: string
          example: Invalid credentials
    SuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: Operation completed successfully
